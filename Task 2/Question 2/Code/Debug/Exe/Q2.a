;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;int temp;
;int SevenSegNumber[10] = {0b00111111 , 0b00000110 , 0b01011011 , 0b01001111 , 0b01100110 , 0b01101101 , 0b01111101 , 0b0 ...

	.DSEG
;
;int Timer0OverFlowCounter =0;
;int Timer1OverFlowCounter =0;
;int SevenSegCounter[4] = {0,0,0,0};
;int i =3;
;int lastSevenSeg=3;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0010 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0011 
; 0000 0012 
; 0000 0013    ++Timer0OverFlowCounter;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0014     if(Timer0OverFlowCounter ==2){
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0015            temp = PORTC ^ 0b11111111;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0016            PORTC= temp ^ 0b11111111;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0017            PORTD = SevenSegNumber[SevenSegCounter[lastSevenSeg]];
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0018            temp = temp >>1;
;PCODE: $00000027 VOL: 0
; 0000 0019            if(temp ==0){
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 001A            temp = 8;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 001B            }
; 0000 001C            temp = temp ^ 0b11111111;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 001D            PORTC = temp;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 001E            temp = temp ^ 0b11111111;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 001F 
; 0000 0020               Timer0OverFlowCounter=0;
;PCODE: $00000035 VOL: 0
; 0000 0021              lastSevenSeg--;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0022              if(lastSevenSeg == -1 ){
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0023              lastSevenSeg = 3;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0024              }
; 0000 0025     }
;PCODE: $0000003E VOL: 0
; 0000 0026 
; 0000 0027 
; 0000 0028        TCNT0=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0029 
; 0000 002A }
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 002E {
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 002F 
; 0000 0030     ++Timer1OverFlowCounter;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0031     if(Timer1OverFlowCounter ==500){
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0032 
; 0000 0033          SevenSegCounter[3]++;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0034 
; 0000 0035          while (i>=0){
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0036 
; 0000 0037             if( SevenSegCounter[i] ==10){
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0038 
; 0000 0039             SevenSegCounter[i-1]++;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 003A             SevenSegCounter[i]=0;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 003B 
; 0000 003C             }
; 0000 003D              i--;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 003E          }
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 003F 
; 0000 0040 
; 0000 0041                    i=3;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0042              Timer1OverFlowCounter=0;
;PCODE: $00000072 VOL: 0
; 0000 0043 
; 0000 0044     }
; 0000 0045 
; 0000 0046 
; 0000 0047         TCNT1H=0xFF;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0048         TCNT1L=0xF0;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0049 
; 0000 004A }
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;
;
;
;void main(void)
; 0000 004F {
;PCODE: $0000007B VOL: 0
; 0000 0050 
; 0000 0051 
; 0000 0052 
; 0000 0053 DDRD=0b11111111;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0054 PORTD=0b00000000;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0055 DDRC=0b11111111;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0056 PORTC=0b11101111;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0057  // 0b00001000 = 8 decimal
; 0000 0058 
; 0000 0059 
; 0000 005A 
; 0000 005B 
; 0000 005C 
; 0000 005D // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 005E TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 005F 
; 0000 0060 
; 0000 0061 // Timer/Counter 0 initialization
; 0000 0062 // Clock source: System Clock
; 0000 0063 // Clock value: 8000.000 kHz
; 0000 0064 // Mode: Normal top=0xFF
; 0000 0065 // OC0 output: Disconnected
; 0000 0066 // Timer Period: 0.032 ms
; 0000 0067 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0068 TCNT0=0x00;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0069 OCR0=0x00;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 006A 
; 0000 006B 
; 0000 006C 
; 0000 006D // Timer/Counter 1 initialization
; 0000 006E // Clock source: System Clock
; 0000 006F // Clock value: 8000.000 kHz
; 0000 0070 // Mode: Normal top=0xFFFF
; 0000 0071 // OC1A output: Disconnected
; 0000 0072 // OC1B output: Disconnected
; 0000 0073 // Noise Canceler: Off
; 0000 0074 // Input Capture on Falling Edge
; 0000 0075 // Timer Period: 8.192 ms
; 0000 0076 // Timer1 Overflow Interrupt: On
; 0000 0077 // Input Capture Interrupt: Off
; 0000 0078 // Compare A Match Interrupt: Off
; 0000 0079 // Compare B Match Interrupt: Off
; 0000 007A TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 007B TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 007C TCNT1H=0xFF;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 007D TCNT1L=0xF0;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 007E 
; 0000 007F 
; 0000 0080 
; 0000 0081 // External Interrupt(s) initialization
; 0000 0082 // INT0: Off
; 0000 0083 // INT1: Off
; 0000 0084 // INT2: Off
; 0000 0085 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0086 MCUCSR=(0<<ISC2);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0087 
; 0000 0088 #asm("sei")
;PCODE: $00000098 VOL: 0
	sei
;PCODE: $00000099 VOL: 0
; 0000 0089 while (1)
;PCODE: $0000009A VOL: 0
; 0000 008A       {
; 0000 008B 
; 0000 008C 
; 0000 008D 
; 0000 008E 
; 0000 008F       }
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0090 }
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
