;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : Q2
;Version :
;Date    : 2020-12-10
;Author  : Alireza Soleymani
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Declare your global variables here
;       int TimerOverflowCounter=0 ;
;       int  n =0;
;       int  NUMBER  =0b00000001;
;       int state=0;
;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0023 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0024 
; 0000 0025     TCNT0=0x6;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0026     ++TimerOverflowCounter;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0027 
; 0000 0028     if(TimerOverflowCounter ==250){
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0029      TimerOverflowCounter =0;
;PCODE: $00000017 VOL: 0
; 0000 002A         if(n==1){
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 002B 
; 0000 002C           if(state ==1){
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 002D 
; 0000 002E              NUMBER = NUMBER >>1;
;PCODE: $0000001E VOL: 0
; 0000 002F              PORTB = PORTB & NUMBER;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0030              PORTB = PORTB | NUMBER ;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0031 
; 0000 0032           }else{
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0033 
; 0000 0034              if(NUMBER == 128){
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0035                 PORTB = PORTB & NUMBER;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0036                 PORTB = PORTB | NUMBER;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0037                 state =1;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0038 
; 0000 0039              }else{
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 003A 
; 0000 003B              PORTB = PORTB & NUMBER;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 003C              PORTB = PORTB | NUMBER;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 003D              NUMBER = NUMBER <<1;
;PCODE: $0000003A VOL: 0
; 0000 003E 
; 0000 003F              }
;PCODE: $0000003B VOL: 0
; 0000 0040 
; 0000 0041 
; 0000 0042 
; 0000 0043           }
;PCODE: $0000003C VOL: 0
; 0000 0044      }
; 0000 0045     }
;PCODE: $0000003D VOL: 0
; 0000 0046 
; 0000 0047 
; 0000 0048 
; 0000 0049 }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;
;void main(void)
; 0000 004C {
;PCODE: $00000042 VOL: 0
; 0000 004D 
; 0000 004E DDRA=0b00000000;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 004F PORTA=0b00000000;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0050 
; 0000 0051 
; 0000 0052 DDRB=0b11111111;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0053 PORTB=0b00000000;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0054 
; 0000 0055 
; 0000 0056 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0057 TCNT0=6;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0058 OCR0=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0059 
; 0000 005A 
; 0000 005B 
; 0000 005C // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 005D TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 005E 
; 0000 005F // External Interrupt(s) initialization
; 0000 0060 // INT0: Off
; 0000 0061 // INT1: Off
; 0000 0062 // INT2: Off
; 0000 0063 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0064 MCUCSR=(0<<ISC2);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0065 
; 0000 0066 
; 0000 0067 #asm("sei")
;PCODE: $00000057 VOL: 0
	sei
;PCODE: $00000058 VOL: 0
; 0000 0068 
; 0000 0069 while (1)
;PCODE: $00000059 VOL: 0
; 0000 006A       {
; 0000 006B 
; 0000 006C 
; 0000 006D           if(state ==1 && PORTB==0){
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 006E            PORTB = 0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 006F            n=0;
;PCODE: $00000066 VOL: 0
; 0000 0070            state=0;
;PCODE: $00000067 VOL: 0
; 0000 0071            NUMBER =0b00000001;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0072           }
; 0000 0073 
; 0000 0074            if(PINA.0 == 1){
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0075 
; 0000 0076             n=1;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0077           }
; 0000 0078       }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0079 }
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
